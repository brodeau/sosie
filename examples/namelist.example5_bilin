!! -------------------
!! Namelist for SOSIE
!! -------------------
!!
!! EXAMPLE 5:
!! #########
!!
!! Interpolation of a few time records of air temperature at 2m of ECMWF
!! high-resOperational Analysis on a stereographic projection of the Arctic
!!
!! ************************************************************
!! &ninput => info about field to interpolate
!!            and source grid to interpolate from
!! ************************************************************
!!
!! ivect : vector correction control on treated field [integer]
!!         ivect = 0 : input field is not a component of a vector
!!         or the target grid is regular (lregout = T)
!!         * if non-regular distorted target grids (like ORCAX):
!!         ivect = 1 : input field is a zonal (X) component of a vector
!!         ivect = 2 : input field is a meridional (Y) component of a vector
!!
!! lregin : is the source grid regular? [logical]
!!          (ie : are input longitude and latitude 1D?)
!!
!! cf_in   : file containing the input field to be interpolated [char]
!! cv_in   : name of treated variable (in input field file) [char]
!!
!! cv_t_in : name of time record variable in the input file [char]
!!           or 'missing_rec' if no time record is present in the input file
!!
!! jt1     : first time record to be interpolated
!! jt2     : last  time record to be interpolated
!!           => set jt1 and jt2 to 0 if you want to skip this option
!!              and interpolate the nt time steps of the current field
!!
!! jplev : level to treat if your file is 3D (spatial), has no influence if
!!         your file is 2D in space !
!!       ------------------------------------------------------------------
!!        jplev > 0 = level to treat (ex : jplev = 1 will interpolate only
!!                    surface field corresponding to the 1st level )
!!       ------------------------------------------------------------------
!!        jplev = 0 : perform 3D interpolation (if input file is 3D) !!! |
!!       ------------------------------------------------------------------
!!        jplev = -1 : overrides good sense and forces sosie to understand that
!!                     your field to interpolate is 2D with a time record
!!                     (usually the case if the time record dimension in your
!!                      input file is not declared as UNLIMITED => bad! )
!!                     => so SOSIE doesn't mistake this time record with a depth!
!!       -------------------------------------------------------------------
!!
!! cf_x_in   : file containing the input grid (usually = cf_in) [char]
!! cv_lon_in : name of longitude in the input grid file [char]
!! cv_lat_in : name of latitude in the input grid file [char]
!!
!! cf_lsm_in : file containing the input land-sea mask [char]
!!             (only relevant if ldrown==.true.)
!!             Alternatively:
!!             * specify " cf_lsm_in = 'missing_value' " if a 'missing_value' netcdf
!!               attribute defines the mask on the input data field
!!             * specify " cf_lsm_in = 'nan' " if mask is defined with NaN values
!!               (not needed if "ldrown = .FALSE." --> '')
!!
!! cv_lsm_in : name of land-sea mask variable [char]
!!             (not needed if "ldrown = .FALSE."
!!              or if cf_lsm_in = 'missing_value'--> '')
!!             by default ocean is flagged with value 1
!!             and continents are flagged with value 0
!!
!! ldrown : whether we call DROWN land filling procedure [logical]
!!
!! ewper : east-west periodicity on the input file/grid [integer]
!!         = -1 --> no periodicity
!!         >= 0 --> periodicity with overlap of ewper points
!!
!! vmax : upper bound not to exceed for treated variable [real]
!! vmin : lower bound not to exceed for treated variable [real]
!!--------------------------------------------------------------------------
!!
&ninput
ivect     = 0    ! this is not a vector interpolation
lregin    = T    ! input grid is regular (lon and lat are "1D")
cf_in     = 'data/T2M_ECMWF-OA_20141201_3h_2560x480_North.nc4'
cv_in     = 'T2M'
cv_t_in   = 'time'
jt1       = 0    ! we want to interpolate each time record
jt2       = 0    !           //
jplev     = 1
cf_x_in   = 'data/T2M_ECMWF-OA_20141201_3h_2560x480_North.nc4'
cv_lon_in = 'lon'
cv_lat_in = 'lat'
cf_lsm_in = 'data/T2M_ECMWF-OA_20141201_3h_2560x480_North.nc4'
cv_lsm_in = 'lsm'
ldrown    = T      ! we want to propagate sea values onto continents
ewper     = 0      ! input field does have a east-west periodicity with 0 overlapping point
vmax      =  1.E6
vmin      = -1.E6
/
!!
!!
!!
!!
!!
!!
!! *****************************************************************
!! &nhtarget => info about horizontal target grid to interpolate to
!! *****************************************************************
!!
!! lregout : is the target grid regular ? [logical]
!!           (ie : are output longitude and latitude 1D?)
!!
!! cf_x_out   : file containing the target grid [char]
!! cv_lon_out : name of longitude variable [char]
!! cv_lat_out : name of latitude variable [char]
!!
!! TRICK:  for interpolating onto a global regular spherical grid
!! ------  with a resolution of dx deg. of longitude and dy deg. of latitude
!!         * cf_x_out   = 'spheric' ! tells SOSIE to build a spherical output grid
!!         * cv_lon_out = '1.0'  ! your dx, here 1.0 deg.
!!         * cv_lat_out = '1.0'  ! your dy, here 1.0 deg.
!!
!!
!! cf_lsm_out : file containing output land-sea mask [char]
!!              MUST BE 3D for 3D interpolation!
!!              or specify 'missing_value' if a 'missing_value' netcdf
!!              attribute defines the mask on a field 'X' in file 'cf_x_out'
!!              (not needed if "lmout = .FALSE." --> '')
!!
!! cv_lsm_out : name of land-sea mask variable in 'cf_lsm_out'     [char]
!!              or name of field 'X' in 'cf_x_out' if you specified
!!              cf_lsm_out = 'missing_value'
!!              (not needed if "lmout = .FALSE." --> '')
!!
!! lmout : whether to mask the interpolated field on the output file [logical]
!!         if lmout is set to .FALSE. and cf_lsm_out is different than '' the output
!!         field will be drowned using the mask defined by cf_lsm_out (and cv_lsm_out)
!!
!! rmaskvalue : missing value given to output field (for continents) [logical]
!!
!! lct   : whether to control or not time variable [logical]
!!         TRUE -> specify time array with starting time 't0' and step 't_stp'
!!                 usefull if you do not have a "time" variable in your input netcdf file !
!!         FALSE -> same time array as in input file is used
!! t0    : time to start (if lct is set to .TRUE.) [real]
!! t_stp : time step (if lct is set to .TRUE.) [real]
!!
!! ewper_out : east-west periodicity on the output file/grid [integer]
!!             = -1 --> no periodicity
!!             >= 0 --> periodicity with overlap of ewper points
!!
!!
&nhtarget
lregout    = F     ! Target grid is not regular !!!
cf_x_out   = 'data/Polar_Stereographic_Land-Ocean-Coastline-Ice_Masks_448x304_LB.nc'
cv_lon_out = 'longitude'
cv_lat_out = 'latitude'
cf_lsm_out = 'data/Polar_Stereographic_Land-Ocean-Coastline-Ice_Masks_448x304_LB.nc'
cv_lsm_out = 'mask'
lmout      = T      ! We want to mask continents!
rmaskvalue = -9999.
lct        = F
t0         = 0.
t_stp      = 0.
ewper_out  = 0
/
!!
!!
!!
!!
!! *****************************************************************
!! &noutput => info on the (horizontal) interpolation method to use
!!             and the netcdf file to generate
!! *****************************************************************
!!
!! This mostly deals with how the output file to be created is going to look like!
!!
!! cmethod  : the 2D interpolation method to be used
!!
!!            * use 'akima' if your input domain is regular (non-distorted grid)
!!
!!            * use 'bilin' otherwise (bilinear 2D interpolation)
!!
!!            * use 'no_xy' to only perform vertical interpolation, i.e. interpolate a
!!              a 3D field given on ni*nj and nk_in levels to the same ni*nj 2D domain
!!              but on nk_out levels!
!!              => for example interpolates a 3D field from grid ORCAX.L46 to ORCAX.L75
!!
!! *** Into the netcdf file to be created : ***
!! cv_t_out : name of time record vector in the output file               [char]
!! cv_out   : name for treated variable in the output file                [char]
!! cu_out   : if not = '': then change the unit of treated variable units [char]
!! cln_out  : if not = '': then change the long name treated variable     [char]
!! cd_out   : directory to create output file to                          [char]
!!
!! *** Naming of the output file : ***
!! csource  : short string to describe the origin grid         [char]
!! ctarget  : short string to describe the target grid         [char]
!! cextra   : short extra indication about the file            [char]
!! lpcknc4  : pack data (netcdf4 with deflate level set to 9!) [boolean]
!!
&noutput
cmethod  = 'bilin'
cv_t_out = 'time'
cv_out   = 'T2M'
cu_out   = 'K'
cln_out  = '2m air temperature, 20141201, ECMWF op. an.'
cd_out   = '.'
!!
csource  = '2560x480'
ctarget  = 'polar-stereo'
cextra   = 'Arctic'
lpcknc4  = .true.
/
!!
