!! ------------------- 
!! Namelist for SOSIE 
!! ------------------- 
!!
!! EXAMPLE 1: Interpolation of Reynolds (2002) Long Term Mean SST onto the ORCA1 grid
!! #########
!! 
!!
!!
!! *********************** 
!! Input characteristics : 
!! *********************** 
!! 
!! ivect : vector correction control on treated field [integer] 
!!         ivect = 0 : input field is not a component of a vector 
!!         or the target grid is regular (lregout = T) 
!!         * if non-regular distorted target grids (like ORCAX): 
!!         ivect = 1 : input field is a zonal (X) component of a vector 
!!         ivect = 2 : input field is a meridional (Y) component of a vector 
!! 
!! lregin : is the source grid regular? [logical] 
!!          (ie : are input longitude and latitude 1D?) 
!! 
!! cf_in   : file containing the input field to be interpolated [char]
!! cv_in   : name of treated variable (in input field file) [char]
!!
!! cv_t_in : name of time record variable in the input file [char]
!!           or 'missing_rec' if no time record is present in the input file
!!
!! jt1     : first time record to be interpolated
!! jt2     : last  time record to be interpolated
!!           => set jt1 and jt2 to 0 if you want to skip this option 
!!              and interpolate the nt time steps of the current field
!! 
!! jplev : level to treat if your file is 3D (spatial), has no influence if 
!!         your file is 2D !
!!         jplev > 0 = level to treat (ex : jplev = 1 will interpolate only 
!!                     surface field corresponding to the 1st level )
!!       ------------------------------------------------------------------
!!        jplev = 0 : perform 3D interpolation (if input file is 3D) !!! |
!!       ------------------------------------------------------------------
!!       ------------------------------------------------------------------
!!        jplev = -1 : overides good sence and force sosie to understand that
!!                     your field to interpolate is 2D with a time record
!!                     (usually the case if the time record dimension in your
!!                      input file is not declared as UNLIMITED => bad! :(
!!       ------------------------------------------------------------------
!!
!! cf_x_in   : file containing the input grid (usually = cf_in) [char] 
!! cv_lon_in : name of longitude in the input grid file [char] 
!! cv_lat_in : name of latitude in the input grid file [char] 
!! 
!! cf_lsm_in : file containing the input land-sea mask [char]
!!             or specify 'missing_value' if a 'missing_value' netcdf
!!             attribute defines the mask on the input data field
!!             (not needed if "ldrown = .FALSE." --> '')

!! cv_lsm_in : name of land-sea mask variable [char]
!!             (not needed if "ldrown = .FALSE." 
!!              or if cf_lsm_in = 'missing_value'--> '')
!!             by default ocean is flagged with value 1
!!             and continents are flagged with value 0
!!
!! ldrown : whether we call DROWN land filling procedure [logical] 
!!
!! ewper : east-west periodicity on the input file/grid [integer] 
!!         = -1 --> no periodicity 
!!         >= 0 --> periodicity with overlap of ewper points 
!! 
!! vmax : upper bound not to exceed for treated variable [real] 
!! vmin : lower bound not to exceed for treated variable [real] 
!!-------------------------------------------------------------------------- 
!! 
&ninput
ivect     = 0    ! this is not a vector interpolation
lregin    = T    ! input grid is regular (lon and lat are "1D")
cf_in     = 'data/sst.ltm.1971-2000.nc'
cv_in     = 'sst'
cv_t_in   = 'time'
jt1       = 0    ! we want to interpolate each time record
jt2       = 0    !           //
jplev     = 1
cf_x_in   = 'data/sst.ltm.1971-2000.nc'
cv_lon_in = 'lon'
cv_lat_in = 'lat'
cf_lsm_in = 'missing_value'   ! we use 'missing_value' of input field to determine
cv_lsm_in = ''                ! the land-sea-mask
ldrown    = T            ! we want to propagate sea values onto the land-sea mask
ewper     = 0          ! input field does have east-west periodicity with 0 overlapping point
vmax      =  1.E6
vmin      = -1.E6
/
!!
!!
!!
!!
!! ***********************************
!!  IF 3D INTERPOLATION ( jplev = 0 )
!! ***********************************
!! 
!! This namelist section is not required as we do pure 2D interpolation
!!
!!
!!
!! ***************************** 
!! Output Grid characteristics : 
!! ***************************** 
!! 
!! lregout : is the target grid regular ? [logical] 
!!           (ie : are output longitude and latitude 1D?) 
!!
!! cf_x_out   : file containing the target grid [char] 
!! cv_lon_out : name of longitude variable [char] 
!! cv_lat_out : name of latitude variable [char] 
!!
!! TRICK:  for interpolating onto a global regular spherical grid
!! ------  with a resolution of dx deg. of longitude and dy deg. of latitude
!!         * cf_x_out   = 'spheric' ! tells SOSIE to build a spherical output grid
!!         * cv_lon_out = '1.0'  ! your dx, here 1.0 deg. 
!!         * cv_lat_out = '1.0'  ! your dy, here 1.0 deg.
!!
!!
!! cf_lsm_out : file containing output land-sea mask [char] 
!!              MUST BE 3D for 3D interpolation!
!!              or specify 'missing_value' if a 'missing_value' netcdf
!!              attribute defines the mask on a field 'X' in file 'cf_x_out'
!!              (not needed if "lmout = .FALSE." --> '') 
!!
!! cv_lsm_out : name of land-sea mask variable in 'cf_lsm_out'     [char]
!!              or name of field 'X' in 'cf_x_out' if you specified 
!!              cf_lsm_out = 'missing_value'
!!              (not needed if "lmout = .FALSE." --> '') 
!!
!! lmout : whether to mask the interpolated field on the output file [logical] 
!!         if lmout is set to .FALSE. and cf_lsm_out is different than '' the output
!!         field will be drowned using the mask defined by cf_lsm_out (and cv_lsm_out)
!!
!! rmaskvalue : missing value given to output field (for continents) [logical] 
!!
!! lct   : whether to control or not time variable [logical] 
!!         TRUE -> specify time array with starting time 't0' and step 't_stp' 
!!                 usefull if you do not have a "time" variable in your input netcdf file !
!!         FALSE -> same time array as in input file is used 
!! t0    : time to start (if lct is set to .TRUE.) [real] 
!! t_stp : time step (if lct is set to .TRUE.) [real]
!!
!! ewper_out : east-west periodicity on the output file/grid [integer] 
!!             = -1 --> no periodicity 
!!             >= 0 --> periodicity with overlap of ewper points 
!!
!!
&noutput
lregout    = F
cf_x_out   = 'data/mesh_mask_ORCA1_light.nc'
cv_lon_out = 'nav_lon'
cv_lat_out = 'nav_lat'
cf_lsm_out = 'data/mesh_mask_ORCA1_light.nc'
cv_lsm_out = 'tmask'
lmout      = T
rmaskvalue = -999.
lct        = F      ! we use time from input file
t0         = 0
t_stp      = 0
ewper_out  = 2
/
!! 
!! 
!! 
!! 
!! ******************************* 
!! Netcdf output characteristics : 
!! ******************************* 
!! 
!! This mostly deals with how the output file to be created is going to look like!
!!
!! cmethod  : the 2D interpolation method to be used
!!            use 'akima' if your input domain is regular (non-distorted grid)
!!            use 'bilin' otherwise, which is bilinear 2D interpolation
!!
!! *** Into the netcdf file to be created : *** 
!! cv_l_out : name for longitude on the output file [char] 
!! cv_p_out : name for latitude on the output file [char] 
!! cv_t_out : name for time on the output file [char] 
!! cv_out   : name for treated variable on the output file [char] 
!! cu_out   : treated variable units [char] 
!! cu_t     : time unit [char]
!! cln_out  : treated variable long name [char] 
!! cd_out   : directory to create output file to [char]
!! 
!! *** Name of the output file : *** 
!! csource  : short string to describe origin of the file [char] 
!! ctarget  : short string to describe the target grid [char] 
!! cextra   : short extra indication about the file [char] 
!! lpcknc4  : pack data (netcdf4 with deflate level set to 9!)
!! 
&nnetcdf
cmethod  = 'akima'
cv_l_out = 'nav_lon'
cv_p_out = 'nav_lat'
cv_t_out = 'time_counter'
cv_out   = 'SST'
cu_out   = 'deg.C'
cu_t     = 'month'
cln_out  = 'Reynolds Sea Surface Temperature, Long Term Mean, 1971-2000'
cd_out   = '.'
csource  = '360x180'
ctarget  = 'ORCA1'
cextra   = 'REYNOLDS_LTM_akima'
lpcknc4  = .true.
/ 
!!
